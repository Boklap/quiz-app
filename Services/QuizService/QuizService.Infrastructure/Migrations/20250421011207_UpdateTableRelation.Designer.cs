// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizService.Infrastructure.Data.PostgresDbContext;

#nullable disable

namespace QuizService.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresQuizServiceDbContext))]
    [Migration("20250421011207_UpdateTableRelation")]
    partial class UpdateTableRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizService.Domain.Entities.Difficulty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DifficultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("QuizStatusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("QuizStatusId");

                    b.HasIndex("TagId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.QuizDetail", b =>
                {
                    b.Property<string>("QuizId")
                        .HasColumnType("text");

                    b.Property<string>("QuestionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QuizId", "QuestionId");

                    b.ToTable("QuizDetails");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.QuizStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("QuizStatuses");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("QuizService.Domain.Entities.Difficulty", "Difficulty")
                        .WithMany("Quizzes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizService.Domain.Entities.QuizStatus", "Status")
                        .WithMany("Quizzes")
                        .HasForeignKey("QuizStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizService.Domain.Entities.Tag", "Tag")
                        .WithMany("Quizzes")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("QuizService.Domain.ValueObjects.Quiz.Description", "Description", b1 =>
                        {
                            b1.Property<string>("QuizId")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("QuizId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("QuizId");
                        });

                    b.OwnsOne("QuizService.Domain.ValueObjects.Quiz.MinimumGrade", "MinimumGrade", b1 =>
                        {
                            b1.Property<string>("QuizId")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("MinimumGrade");

                            b1.HasKey("QuizId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("QuizId");
                        });

                    b.OwnsOne("QuizService.Domain.ValueObjects.Quiz.Name", "Name", b1 =>
                        {
                            b1.Property<string>("QuizId")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Name");

                            b1.HasKey("QuizId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("QuizId");
                        });

                    b.OwnsOne("QuizService.Domain.ValueObjects.Quiz.TestDuration", "TestDuration", b1 =>
                        {
                            b1.Property<string>("QuizId")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("TestDuration");

                            b1.HasKey("QuizId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("QuizId");
                        });

                    b.OwnsOne("QuizService.Domain.ValueObjects.Quiz.TotalQuestion", "TotalQuestion", b1 =>
                        {
                            b1.Property<string>("QuizId")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("TotalQuestion");

                            b1.HasKey("QuizId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("QuizId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("MinimumGrade")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Tag");

                    b.Navigation("TestDuration")
                        .IsRequired();

                    b.Navigation("TotalQuestion")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizService.Domain.Entities.QuizDetail", b =>
                {
                    b.HasOne("QuizService.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizDetails")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.Difficulty", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("QuizDetails");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.QuizStatus", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizService.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Quizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
